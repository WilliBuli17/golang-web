-- Go-Lang Web
        1. Go-Lang saat ini populer dijadikan salah satu pilihan bahasa pemrograman untuk membuat Web, terutama Web API (Backend)
        2. Selain itu, di Go-Lang juga sudah disediakan package untuk membuat Web, bahkan di sertakan pula package untuk implementasi
           unit testing untuk Web
        3. Hal ini menjadikan pembuatan Web menggunakan Go-Lang lebih mudah, karena tidak butuh menggunakan library atau framework

        -- Cara Kerja Go-Lang Web
                1. Web Browser akan melakukan HTTP Request ke Web Server
                2. Golang menerima HTTP Request, lalu mengeksekusi request tersebut sesuai dengan yang diminta.
                3. Setelah melakukan eksekusi request, Golang akan mengembalikan data dan di render sesuai dengan kebutuhannya,
                   misal HTML, CSS, JavaScript dan lain-lain
                4. Golang akan mengembalikan content hasil render tersebut tersebut sebagai HTTP Response ke Web Browser
                5. Web Browser menerima content dari Web Server, lalu me-render content tersebut sesuai dengan tipe content nya

        -- Package net/http
                1. Pada beberapa bahasa pemrograman lain, seperti Java misalnya, untuk membuat web biasanya dibutuhkan
                   tambahan library atau framework
                2. Sedangkan di Go-Lang sudah disediakan package untuk membuat web bernama package net/http
                3. Sehingga untuk membuat web menggunakan Go-Lang, kita tidak butuh lagi library tambahan, kita bisa menggunakan
                   package yang sudah tersedia
                4. Walaupun memang saat kita akan membuat web dalam skala besar, direkomendasikan menggunakan framework karena
                   beberapa hal sudah dipermudah oleh web framework
                5. Namun pada course ini, kita akan fokus menggunakan package net/http untuk membuat web nya, karena semua
                   framework web Go-Lang akan menggunakan net/http sebagai basis dasar framework nya

-- Server
        1. Server adalah struct yang terdapat di package net/http yang digunakan sebagai representasi Web Server di Go-Lang
        2. Untuk membuat web, kita wajib membuat Server
        3. Saat membuat data Server, ada beberapa hal yang perlu kita tentukan, seperti host dan juga port tempat dimana Web kita berjalan
        4. Setelah membuat Server, kita bisa menjalankan Server tersebut menggunakan function ListenAndServe()

-- Handler
        1. Server hanya bertugas sebagai Web Server, sedangkan untuk menerima HTTP Request yang masuk ke Server,
           kita butuh yang namanya Handler
        2. Handler di Go-Lang di representasikan dalam interface, dimana dalam kontraknya terdapat sebuah function bernama
           ServeHTTP() yang digunakan sebagai function yang akan di eksekusi ketika menerima HTTP Request

        -- HandlerFunc
                1. Salah satu implementasi dari interface Handler adalah HandlerFunc
                2. Kita bisa menggunakan HandlerFunc untuk membuat function handler HTTP

-- ServeMux
        1. Saat membuat web, kita biasanya ingin membuat banyak sekali endpoint URL
        2. HandlerFunc sayangnya tidak mendukung itu
        3. Alternative implementasi dari Handler adalah ServeMux
        4. ServeMux adalah implementasi Handler yang bisa mendukung multiple endpoint

        -- URL Pattern
                1. URL Pattern dalam ServeMux sederhana, kita tinggal menambahkan string yang ingin kita gunakan sebagai
                   endpoint, tanpa perlu memasukkan domain web kita
                2. Jika URL Pattern dalam ServeMux kita tambahkan di akhirnya dengan garis miring, artinya semua url
                   tersebut akan menerima path dengan awalan tersebut, misal /images/ artinya akan dieksekusi
                   jika endpoint nya /images/, /images/contoh, /images/contoh/lagi
                3. Namun jika terdapat URL Pattern yang lebih panjang, maka akan diprioritaskan yang lebih panjang,
                   misal jika terdapat URL /images/ dan /images/thumbnails/, maka jika mengakses /images/thumbnails/
                   akan mengakses /images/thumbnails/, bukan /images

-- Request
        1. Request adalah struct yang merepresentasikan HTTP Request yang dikirim oleh Web Browser
        2. Semua informasi request yang dikirim bisa kita dapatkan di Request
        4. Seperti, URL, http method, http header, http body, dan lain-lain

-- HTTP Test
        1. Go-Lang sudah menyediakan package khusus untuk membuat unit test terhadap fitur Web yang kita buat
        2. Semuanya ada di dalam package net/http/httptest https://golang.org/pkg/net/http/httptest/
        3. Dengan menggunakan package ini, kita bisa melakukan testing handler web di Go-Lang tanpa harus menjalankan aplikasi web nya
        4. Kita bisa langsung fokus terhadap handler function yang ingin kita test

        -- httptest.NewRequest()
                1. NewRequest(method, url, body) merupakan function yang digunakan untuk membuat http.Request
                2. Kita bisa menentukan method, url dan body yang akan kita kirim sebagai simulasi unit test
                3. Selain itu, kita juga bisa menambahkan informasi tambahan lainnya pada request yang ingin kita kirim,
                   seperti header, cookie, dan lain-lain

        -- httptest.NewRecorder()
                1. httptest.NewRecorder() merupakan function yang digunakan untuk membuat ResponseRecorder
                2. ResponseRecorder merupakan struct bantuan untuk merekam HTTP response dari hasil testing yang kita lakukan

-- Query Parameter
        1. Query parameter adalah salah satu fitur yang biasa kita gunakan ketika membuat web
        2. Query parameter biasanya digunakan untuk mengirim data dari client ke server
        3. Query parameter ditempatkan pada URL
        4. Untuk menambahkan query parameter, kita bisa menggunakan ?nama=value pada URL nya

        -- url.URL
                1. Dalam parameter Request, terdapat attribute URL yang berisi data url.URL
                2. Dari data URL ini, kita bisa mengambil data query parameter yang dikirim dari client dengan menggunakan
                   method Query() yang akan mengembalikan map

        -- Multiple Query Parameter
                1. Dalam spesifikasi URL, kita bisa menambahkan lebih dari satu query parameter
                2. Ini cocok sekali jika kita memang ingin mengirim banyak data ke server, cukup tambahkan query parameter lainnya
                3. Untuk menambahkan query parameter, kita bisa gunakan tanda & lalu diikuti dengan query parameter berikutnya

        -- Multiple Value Query Parameter
                1. Sebenarnya URL melakukan parsing query parameter dan menyimpannya dalam map[string][]string
                2. Artinya, dalam satu key query parameter, kita bisa memasukkan beberapa value
                3. Caranya kita bisa menambahkan query parameter dengan nama yang sama, namun value berbeda, misal :
                4. name=Willi&name=Buli

-- Header
        1. Selain Query Parameter, dalam HTTP, ada juga yang bernama Header
        2. Header adalah informasi tambahan yang biasa dikirim dari client ke server atau sebaliknya
        3. Jadi dalam Header, tidak hanya ada pada HTTP Request, pada HTTP Response pun kita bisa menambahkan informasi header
        4. Saat kita menggunakan browser, biasanya secara otomatis header akan ditambahkan oleh browser, seperti informasi browser,
           jenis tipe content yang dikirim dan diterima oleh browser, dan lain-lain

        -- Request Header
                1. Untuk menangkap request header yang dikirim oleh client, kita bisa mengambilnya di Request.Header
                2. Header mirip seperti Query Parameter, isinya adalah map[string][]string
                3. Berbeda dengan Query Parameter yang case sensitive, secara spesifikasi, Header key tidaklah case sensitive

        -- Response Header
                1. Sedangkan jika kita ingin menambahkan header pada response, kita bisa menggunakan function ResponseWriter.Header()

-- Form Post
        1. Saat kita belajar HTML, kita tahu bahwa saat kita membuat form, kita bisa submit datanya dengan method GET atau POST
        2. Jika menggunakan method GET, maka hasilnya semua data di form akan menjadi query parameter
        3. Sedangkan jika menggunakan POST, maka semua data di form akan dikirim via body HTTP request
        4. Di Go-Lang, untuk mengambil data Form Post sangatlah mudah

        -- Request.PostForm
                1. Semua data form post yang dikirim dari client, secara otomatis akan disimpan dalam attribute Request.PostForm
                2. Namun sebelum kita bisa mengambil data di attribute PostForm, kita wajib memanggil method Request.ParseForm()
                   terlebih dahulu, method ini digunakan untuk melakukan parsing data body apakah bisa di parsing menjadi form data atau tidak,
                   jika tidak bisa di parsing, maka akan menyebabkan error

-- Response Code
        1. Dalam HTTP, terdapat yang namanya response code
        2. Response code merupakan representasi kode response
        3. Dari response code ini kita bisa melihat apakah sebuah request yang kita kirim itu sukses diproses oleh server atau gagal
        4. Ada banyak sekali response code yang bisa kita gunakan saat membuat web
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

        -- Mengubah Response Code
                1. Secara default, jika kita tidak menyebutkan response code, maka response code nya adalah 200 OK
                2. Jika kita ingin mengubahnya, kita bisa menggunakan function ResponseWriter.WriteHeader(int)
                3. Semua data status code juga sudah disediakan di Go-Lang, jadi kita ingin, kita bisa gunakan variable yang sudah disediakan :
                   https://github.com/golang/go/blob/master/src/net/http/status.go

-- Cookie
        -- Stateless
                1. HTTP merupakan stateless antara client dan server, artinya server tidak akan menyimpan data apapun untuk mengingat
                   setiap request dari client
                2. Hal ini bertujuan agar mudah melakukan scalability di sisi server
                3. Lantas bagaimana caranya agar server bisa mengingat sebuah client? Misal ketika kita sudah login di website,
                   server otomatis harus tahu jika client tersebut sudah login, sehingga request selanjutnya, tidak perlu diminta
                   untuk login lagi
                4. Untuk melakukan hal ini, kita bisa memanfaatkan Cookie

        -- Cookie
                1. Cookie adalah fitur di HTTP dimana server bisa memberi response cookie (key-value) dan client akan menyimpan cookie
                   tersebut di web browser
                2. Request selanjutnya, client akan selalu membawa cookie tersebut secara otomatis
                3. Dan server secara otomatis akan selalu menerima data cookie yang dibawa oleh client setiap kalo client mengirimkan request

        -- Membuat Cookie
                1. Cookie merupakan data yang dibuat di server dan sengaja agar disimpan di web browser
                2. Untuk membuat cookie di server, kita bisa menggunakan function http.SetCookie()




















